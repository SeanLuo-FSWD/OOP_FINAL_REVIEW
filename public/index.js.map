{"version":3,"sources":["CustomizedMap.ts","Geo.ts","index.ts"],"names":[],"mappings":"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","file":"index.js","sourceRoot":"../src","sourcesContent":["import { GeoFeatures } from \"./interfaces\";\n\nexport class CustomizedMap {\n  private googleMap: google.maps.Map;\n  constructor(divId: string) {\n    this.googleMap = new google.maps.Map(document.getElementById(divId), {\n      zoom: 13,\n      center: {\n        lng: -122.9658755,\n        lat: 49.2393853,\n      },\n    });\n  }\n\n  addPin(geoCord: GeoFeatures): void {\n    const { y: lat, x: lng } = geoCord.geometry;\n    const marker = new google.maps.Marker({\n      map: this.googleMap,\n      position: { lat, lng },\n    });\n\n    marker.addListener(\"click\", () => {\n      const infoWindow = new google.maps.InfoWindow({\n        content: \"some trashcan info for you\",\n      });\n\n      infoWindow.open(this.googleMap, marker);\n    });\n  }\n}\n","import { GeoFeatures } from \"./interfaces\";\n\nexport class Geo {\n  geometry: GeoFeatures[] = [];\n\n  public static readonly API_URL =\n    \"https://gis.burnaby.ca/arcgis/rest/services/OpenData/OpenData3/MapServer/2/query?where=1%3D1&outFields=SHAPE&outSR=4326&f=json\";\n\n  private constructor(jsonData) {\n    this.geometry = jsonData;\n  }\n\n  static build(): any {\n    return Geo.fetchGeometry().then((json) => {\n      return new Geo(json);\n    });\n  }\n\n  static fetchGeometry(): Promise<GeoFeatures[]> {\n    return fetch(Geo.API_URL, {\n      method: \"GET\",\n    })\n      .then((response) => response.json())\n      .then((json) => json.features)\n      .catch((err) => console.log(err));\n  }\n}\n","import { CustomizedMap } from \"./CustomizedMap\";\nimport { Geo } from \"./Geo\";\n\nwindow[\"initMaps\"] = async function () {\n  const map = new CustomizedMap(\"map\");\n  const geoObj: Geo = await Geo.build();\n  geoObj.geometry.forEach((geoCoord) => map.addPin(geoCoord));\n};\n"]}